import csv
import random

class Registro:
  def __init__(self, titulo, autor, genero, subgenero, indice):
      self.titulo = titulo
      self.autor = autor
      self.genero = genero
      self.subgenero = subgenero
      self.exemplares = random.randint(3, 100)  # Intervalo de 3 a 10 exemplares aleatórios
      self.emprestimos = random.randint(0, 80)  # Intervalo de 0 a 3 empréstimos aleatórios
      self.indice = f"{genero}-{subgenero}-{indice}"

class PaginaRegistro:
  def __init__(self):
    self.registros = []

class NoFilho:
  def __init__(self, chave, pagina):
    self.chave = chave
    self.pagina = pagina

class NoPai:
  def __init__(self, chave):
    self.chave = chave
    self.nos_filhos = []

class ArvoreBPlus:
  def __init__(self, ordem):
    self.ordem = ordem
    self.raiz = Pagina()

  def inserir(self, registro):
    # Verificar se a raiz está vazia
    if not self.raiz:
      self.raiz = PaginaRegistro()
      self.raiz.registros.append(registro)
      return
    
    # Adicionar à página folha adequada
    pagina_atual = self.raiz
    while not isinstance(pagina_atual, PaginaFolha):
      indice = 0
      while indice < len(pagina_atual.registros) and registro.chave > pagina_atual.registros[indice].chave:
        indice += 1
    
      if indice < len(pagina_atual.registros) and registro.chave == pagina_atual.registros[indice].chave:
          # Registro já existe, atualizar informações ou lidar com duplicatas
          return
      else:
          pagina_atual = pagina_atual.nos_filhos[indice]
    
    # Adicionar o registro à página folha atual
    indice = 0
    while indice < len(pagina_atual.registros) and registro.chave > pagina_atual.registros[indice].chave:
      indice += 1
    
    pagina_atual.registros.insert(indice, registro)
    
    # Verificar se a página folha está cheia e realizar divisão se necessário
    if len(pagina_atual.registros) > self.ordem:
      nova_pagina = PaginaRegistro()
      metade = len(pagina_atual.registros) // 2
      nova_pagina.registros = pagina_atual.registros[metade:]
      pagina_atual.registros = pagina_atual.registros[:metade]
    
      if not pagina_atual.pai:
        nova_pagina.pai = PaginaIndice()
        nova_pagina.pai.nos_filhos.append(pagina_atual)
        nova_pagina.pai.nos_filhos.append(nova_pagina)
        self.raiz = nova_pagina.pai
      else:
        indice_pai = pagina_atual.pai.nos_filhos.index(pagina_atual)
        pagina_atual.pai.nos_filhos.insert(indice_pai + 1, nova_pagina)
        nova_pagina.pai = pagina_atual.pai
    
      # Lidar com a chave de indexação
      self.inserir_indice(pagina_atual, nova_pagina)

    
  def buscar_por_nome_e_subgenero(self, genero, subgenero, parte_nome):
  resultados = []
  pagina_atual = self.raiz

  # Percorre a árvore B+ até encontrar a página folha do gênero
  while not isinstance(pagina_atual, PaginaRegistro):
    indice = 0
    while indice < len(pagina_atual.nos_filhos) and (genero, '') > pagina_atual.nos_filhos[indice].chave:
      indice += 1

    if indice < len(pagina_atual.nos_filhos) and (genero, '') == pagina_atual.nos_filhos[indice].chave:
      pagina_atual = pagina_atual.nos_filhos[indice].pagina
    else:
      return resultados

  # Procura a página de subgênero dentro da página de gênero
  indice = 0
  while indice < len(pagina_atual.nos_filhos) and (subgenero, '') > pagina_atual.nos_filhos[indice].chave:
    indice += 1

  if indice < len(pagina_atual.nos_filhos) and (subgenero, '') == pagina_atual.nos_filhos[indice].chave:
    pagina_atual = pagina_atual.nos_filhos[indice].pagina
  else:
    return resultados

  # Busca registros com o nome fornecido na página de subgênero
  for registro in pagina_atual.registros:
    if parte_nome in registro.titulo:
      resultados.append(registro)

  return resultados


def mostrar_categorias(self):
  pagina_atual = self.raiz

  while not isinstance(pagina_atual, PaginaRegistro):
    pagina_atual = pagina_atual.nos_filhos[0].pagina

  print("Gêneros Disponíveis:")
  for no_filho in pagina_atual.nos_filhos:
    print(no_filho.chave[0])

  return pagina_atual.nos_filhos

def mostrar_subgeneros(self, genero_escolhido):
  pagina_atual = self.raiz

  while not isinstance(pagina_atual, PaginaRegistro):
    indice = 0
    while indice < len(pagina_atual.nos_filhos) and genero_escolhido > pagina_atual.nos_filhos[indice].chave[0]:
      indice += 1

    if indice < len(pagina_atual.nos_filhos) and genero_escolhido == pagina_atual.nos_filhos[indice].chave[0]:
      pagina_atual = pagina_atual.nos_filhos[indice].pagina
    else:
      return []

  print(f"Subgêneros de {genero_escolhido}:")
  for no_filho in pagina_atual.nos_filhos:
      print(no_filho.chave[1])

  return pagina_atual.nos_filhos


def mostrar_resultados(self, resultados):
  print("Resultados Encontrados:")
  for idx, resultado in enumerate(resultados, start=1):
      print(f"{idx}. {resultado.titulo} (Autor: {resultado.autor}, Ano: {resultado.indice}, Exemplares: {resultado.exemplares}, Empréstimos: {resultado.emprestimos})")

def menu_resultados(self, resultados):
  if not resultados:
      print("Nenhum resultado encontrado.")
      return

  opcao = int(input("Escolha o número do resultado para editar: ")) - 1
  if 0 <= opcao < len(resultados):
      escolhido = resultados[opcao]
      print(f"Resultado escolhido: {escolhido.titulo}")

      escolha = input("Deseja atualizar quantidade de exemplares (E) ou quantidade de empréstimos (M)? ").upper()
      if escolha == 'E':
          novos_exemplares = int(input("Digite a quantidade de novos exemplares: "))
          escolhido.exemplares += novos_exemplares
          print("Quantidade de exemplares atualizada com sucesso.")
      elif escolha == 'M':
          novos_emprestimos = int(input("Digite a quantidade de novos empréstimos: "))
          escolhido.emprestimos += novos_emprestimos
          print("Quantidade de empréstimos atualizada com sucesso.")
      else:
          print("Opção inválida.")
  else:
      print("Opção inválida.")


if __name__ == "__main__":
  arvore = ArvoreBPlus(ordem=5)
  arquivo_csv = 'diretorio/arquivo.csv'  # Nome do seu arquivo CSV
  arvore.ler_arquivo_e_inserir(arquivo_csv)

  generos = arvore.mostrar_categorias()

  escolha_genero = input("Escolha um gênero para ver os subgêneros: ")
  subgeneros = arvore.mostrar_subgeneros(escolha_genero)

  if subgeneros:
    escolha_subgenero = input("Escolha um subgênero para buscar por nome: ")
    parte_nome = input("Digite parte do nome do livro: ")
    resultados = arvore.buscar_por_nome_e_categoria(escolha_subgenero, parte_nome)
    arvore.mostrar_resultados(resultados)
    arvore.menu_resultados(resultados)
